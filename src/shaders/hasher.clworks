#ifndef uint32_t
#define uint32_t unsigned int
#endif

#define countof(X) sizeof(X) / sizeof(X[0])

/* #undef printf
 * #define printf(...) */

#define H0 0x6a09e667
#define H1 0xbb67ae85
#define H2 0x3c6ef372
#define H3 0xa54ff53a
#define H4 0x510e527f
#define H5 0x9b05688c
#define H6 0x1f83d9ab
#define H7 0x5be0cd19

#define K_CONSTS                                                        \
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, \
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, \
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, \
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, \
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, \
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, \
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, \
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2

#define KX_CONSTS                               \
  uint K0 = 0x428a2f98,                         \
    K1 = 0x71374491,                            \
    K2 = 0xb5c0fbcf,                            \
    K3 = 0xe9b5dba5,                            \
    K4 = 0x3956c25b,                            \
    K5 = 0x59f111f1,                            \
    K6 = 0x923f82a4,                            \
    K7 = 0xab1c5ed5,                            \
    K8 = 0xd807aa98,                            \
    K9 = 0x12835b01,                            \
    K10 = 0x243185be,                           \
    K11 = 0x550c7dc3,                           \
    K12 = 0x72be5d74,                           \
    K13 = 0x80deb1fe,                           \
    K14 = 0x9bdc06a7,                           \
    K15 = 0xc19bf174,                           \
    K16 = 0xe49b69c1,                           \
    K17 = 0xefbe4786,                           \
    K18 = 0xfc19dc6,                            \
    K19 = 0x240ca1cc,                           \
    K20 = 0x2de92c6f,                           \
    K21 = 0x4a7484aa,                           \
    K22 = 0x5cb0a9dc,                           \
    K23 = 0x76f988da,                           \
    K24 = 0x983e5152,                           \
    K25 = 0xa831c66d,                           \
    K26 = 0xb00327c8,                           \
    K27 = 0xbf597fc7,                           \
    K28 = 0xc6e00bf3,                           \
    K29 = 0xd5a79147,                           \
    K30 = 0x6ca6351,                            \
    K31 = 0x14292967,                           \
    K32 = 0x27b70a85,                           \
    K33 = 0x2e1b2138,                           \
    K34 = 0x4d2c6dfc,                           \
    K35 = 0x53380d13,                           \
    K36 = 0x650a7354,                           \
    K37 = 0x766a0abb,                           \
    K38 = 0x81c2c92e,                           \
    K39 = 0x92722c85,                           \
    K40 = 0xa2bfe8a1,                           \
    K41 = 0xa81a664b,                           \
    K42 = 0xc24b8b70,                           \
    K43 = 0xc76c51a3,                           \
    K44 = 0xd192e819,                           \
    K45 = 0xd6990624,                           \
    K46 = 0xf40e3585,                           \
    K47 = 0x106aa070,                           \
    K48 = 0x19a4c116,                           \
    K49 = 0x1e376c08,                           \
    K50 = 0x2748774c,                           \
    K51 = 0x34b0bcb5,                           \
    K52 = 0x391c0cb3,                           \
    K53 = 0x4ed8aa4a,                           \
    K54 = 0x5b9cca4f,                           \
    K55 = 0x682e6ff3,                           \
    K56 = 0x748f82ee,                           \
    K57 = 0x78a5636f,                           \
    K58 = 0x84c87814,                           \
    K59 = 0x8cc70208,                           \
    K60 = 0x90befffa,                           \
    K61 = 0xa4506ceb,                           \
    K62 = 0xbef9a3f7,                           \
    K63 = 0xc67178f2;

bool compare_hash(uint8 min_hash, uint8 hash);
/* uint8 sha256_init(void); */
uint8 sha256_update(char* message, uint8 digest);
uint8 sha256_finish_padded(char* message, uint ulen, uint orig_ulen, uint8 digest);
uint8 sha256_finish(char* message, uint ulen, uint, uint8 digest);
uint8 sha256_second_hash(uint8 digest);

void flatten_hash(char* msg, uint bytes);

#define htonl(x)                                \
  ((((x) & 0xff000000) >> 24)                   \
   | (((x) & 0x00ff0000) >>  8)                 \
   | (((x) & 0x0000ff00) <<  8)                 \
   | (((x) & 0x000000ff) << 24))

#define ntohl(x)                                \
  ((((x) & 0xff000000) >> 24)                   \
   | (((x) & 0x00ff0000) >>  8)                 \
   | (((x) & 0x0000ff00) <<  8)                 \
   | (((x) & 0x000000ff) << 24))

#define ch(x, y, z) \
  (((x) & (y)) ^ (~(x) & (z)))
/* inline uint ch(uint x, uint y, uint z) {
 *   return (x & y) ^ (~x & z);
 * } */

#define maj(x, y, z) \
  (((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))
/* inline uint maj(uint x, uint y, uint z) {
 *   return (x & y) ^ (x & z) ^ (y & z);
 * } */

#define sigma0(x) \
  (rotate((uint)(x), 30u) ^ rotate((uint)(x), 19u) ^ rotate((uint)(x), 10u))
/* inline uint sigma0(uint x) {
 *   return rotate(x, 30u) ^ rotate(x, 19u) ^ rotate(x, 10u);
 * } */

#define sigma1(x) \
  (rotate((uint)(x), 26u) ^ rotate((uint)(x), 21u) ^ rotate((uint)(x), 7u))
/* inline uint sigma1(uint x) {
 *   return rotate(x, 26u) ^ rotate(x, 21u) ^ rotate(x, 7u);
 * } */

#define gamma0(x) \
  (rotate((uint)(x), 25u) ^ rotate((uint)(x), 14u) ^ ((uint)(x) >> 3))
/* inline uint gamma0(uint x) {
 *   return rotate(x, 25u) ^ rotate(x, 14u) ^ (x >> 3);
 * } */

#define gamma1(x) \
  (rotate((uint)(x), 15u) ^ rotate((uint)(x), 13u) ^ ((uint)(x) >> 10))
/* inline uint gamma1(uint x) {
 *   return rotate(x, 15u) ^ rotate(x, 13u) ^ (x >> 10);
 * } */

/* inline uint8 sha256_init(void) {
 *   return (uint8)(H0, H1, H2, H3, H4, H5, H6, H7);
 * } */

uint8 sha256_update(char* message, uint8 digest) {
  uint K[64] = { K_CONSTS };

  uint W[64];
  uint A, B, C, D, E, F, G, H, T1, T2;
  uint t;

  A = digest.s0;
  B = digest.s1;
  C = digest.s2;
  D = digest.s3;
  E = digest.s4;
  F = digest.s5;
  G = digest.s6;
  H = digest.s7;

#pragma unroll
  for (t = 0; t < 16; ++t) {
    W[t]  = (uchar)(*message) << 24; ++message;
    W[t] |= (uchar)(*message) << 16; ++message;
    W[t] |= (uchar)(*message) <<  8; ++message;
    W[t] |= (uchar)(*message) <<  0; ++message;
  }

#pragma unroll
  for (t = 0; t < 64; ++t) {
    if (t >= 16)
      W[t] = gamma1(W[t - 2]) + W[t - 7] + gamma0(W[t - 15]) + W[t - 16];
    T1 = H + sigma1(E) + ch(E, F, G) + K[t] + W[t];
    T2 = sigma0(A) + maj(A, B, C);
    H = G;
    G = F;
    F = E;
    E = D + T1;
    D = C;
    C = B;
    B = A;
    A = T1 + T2;
  }

  digest += (uint8)(A, B, C, D, E, F, G, H);

  return digest;
}

uint8 sha256_finish_padded(char* message, uint ulen, uint orig_ulen, uint8 digest) {
  uint K[64] = { K_CONSTS };

  uint W[64];
  uint A, B, C, D, E, F, G, H, T1, T2;
  uint t;

  A = digest.s0;
  B = digest.s1;
  C = digest.s2;
  D = digest.s3;
  E = digest.s4;
  F = digest.s5;
  G = digest.s6;
  H = digest.s7;

#pragma unroll
  for (t = 0; t < ulen / 4; ++t) {
    W[t]  = (uchar)(*message) << 24; ++message;
    W[t] |= (uchar)(*message) << 16; ++message;
    W[t] |= (uchar)(*message) << 8;  ++message;
    W[t] |= (uchar)(*message) << 0;  ++message;
  }
  W[t++] = 0x80000000;
  for (; t < 15; ++t)
    W[t] = 0;
  W[15] = orig_ulen * 8;

#pragma unroll
  for (t = 0; t < 64; ++t) {
    if (t >= 16)
      W[t] = gamma1(W[t - 2]) + W[t - 7] + gamma0(W[t - 15]) + W[t - 16];
    T1 = H + sigma1(E) + ch(E, F, G) + K[t] + W[t];
    T2 = sigma0(A) + maj(A, B, C);
    H = G;
    G = F;
    F = E;
    E = D + T1;
    D = C;
    C = B;
    B = A;
    A = T1 + T2;
  }

  digest += (uint8)(A, B, C, D, E, F, G, H);

  return digest;
}

uint8 sha256_nonce_block(uint W[64],
                         uint8 digest,
                         uint2 T);

uint8 sha256_nonce_block(uint *W,
                         uint8 digest,
                         uint2 T) {
  uint K[64] = { K_CONSTS };
  uint A = digest.s0, B = digest.s1, C = digest.s2, D = digest.s3,
       E = digest.s4, F = digest.s5, G = digest.s6, H = digest.s7,
       T1 = T.s0, T2 = T.s1;

#pragma unroll
  for (uint t = 3; t < 64; ++t) {
    if (t >= 16)
      W[t] = gamma1(W[t - 2]) + W[t - 7] + gamma0(W[t - 15]) + W[t - 16];
    T1 = H + sigma1(E) + ch(E, F, G) + K[t] + W[t];
    T2 = sigma0(A) + maj(A, B, C);
    H = G;
    G = F;
    F = E;
    E = D + T1;
    D = C;
    C = B;
    B = A;
    A = T1 + T2;
  }

  return (uint8)(A, B, C, D, E, F, G, H);
}

uint8 sha256_second_hash(uint8 digest) {
  uint K[64] = { K_CONSTS };

  uint W[64];
  uint A, B, C, D, E, F, G, H, T1, T2;
  uint t, ulen = 32;

  W[0] = digest.s0;
  W[1] = digest.s1;
  W[2] = digest.s2;
  W[3] = digest.s3;
  W[4] = digest.s4;
  W[5] = digest.s5;
  W[6] = digest.s6;
  W[7] = digest.s7;
  W[8] = 0x80000000;
#pragma unroll
  for (t = 9; t < 15; ++t)
    W[t] = 0;
  W[15] = ulen * 8;

  A = H0;
  B = H1;
  C = H2;
  D = H3;
  E = H4;
  F = H5;
  G = H6;
  H = H7;

#pragma unroll
  for (t = 0; t < 61; ++t) {
    if (t >= 16)
      W[t] = gamma1(W[t - 2]) + W[t - 7] + gamma0(W[t - 15]) + W[t - 16];
    T1 = H + sigma1(E) + ch(E, F, G) + K[t] + W[t];
    T2 = sigma0(A) + maj(A, B, C);
    H = G;
    G = F;
    F = E;
    E = D + T1;
    D = C;
    C = B;
    B = A;
    A = T1 + T2;
  }

  if (E != 0xa41f32e7)
    return (uint8)(UINT_MAX);

  for (; t < 64; ++t) {
    W[t] = gamma1(W[t - 2]) + W[t - 7] + gamma0(W[t - 15]) + W[t - 16];
    T1 = H + sigma1(E) + ch(E, F, G) + K[t] + W[t];
    T2 = sigma0(A) + maj(A, B, C);
    H = G;
    G = F;
    F = E;
    E = D + T1;
    D = C;
    C = B;
    B = A;
    A = T1 + T2;
  }

  return (uint8)(H0, H1, H2, H3, H4, H5, H6, H7) + (uint8)(A, B, C, D, E, F, G, H);
}

inline uint8 sha256_second_hash_ii(uint8 digest) {
  KX_CONSTS;
  uint W0  = digest.s0,
       W1  = digest.s1,
       W2  = digest.s2,
       W3  = digest.s3,
       W4  = digest.s4,
       W5  = digest.s5,
       W6  = digest.s6,
       W7  = digest.s7,
       W8  = 0x80000000,
       W9  = 0x00000000,
       W10 = 0x00000000,
       W11 = 0x00000000,
       W12 = 0x00000000,
       W13 = 0x00000000,
       W14 = 0x00000000,
       W15 = 256;

  uint W16, W17, W18, W19, W20, W21, W22, W23,
       W24, W25, W26, W27, W28, W29, W30, W31,
       W32, W33, W34, W35, W36, W37, W38, W39,
       W40, W41, W42, W43, W44, W45, W46, W47,
       W48, W49, W50, W51, W52, W53, W54, W55,
       W56, W57, W58, W59, W60, W61, W62, W63;

  uint A = H0, B = H1, C = H2, D = H3, E = H4, F = H5, G = H6, H = H7;
  uint T1, T2;

#define round_pre(t)                                                    \
  T1 = H + sigma1(E) + ch(E, F, G) + K##t + W##t;                       \
  T2 = sigma0(A) + maj(A, B, C);                                        \
  H = G; G = F; F = E; E = D + T1; D = C; C = B; B = A; A = T1 + T2;    \

#define sha_round(t, t2, t7, t15, t16)                                  \
  W##t = gamma1(W##t2) + W##t7 + gamma0(W##t15) + W##t16;               \
  T1 = H + sigma1(E) + ch(E, F, G) + K##t + W##t;                       \
  T2 = sigma0(A) + maj(A, B, C);                                        \
  H = G; G = F; F = E; E = D + T1; D = C; C = B; B = A; A = T1 + T2;    \

  round_pre(0);
  round_pre(1);
  round_pre(2);
  round_pre(3);
  round_pre(4);
  round_pre(5);
  round_pre(6);
  round_pre(7);
  round_pre(8);
  round_pre(9);
  round_pre(10);
  round_pre(11);
  round_pre(12);
  round_pre(13);
  round_pre(14);
  round_pre(15);

  sha_round(16, 14, 9, 1, 0);
  sha_round(17, 15, 10, 2, 1);
  sha_round(18, 16, 11, 3, 2);
  sha_round(19, 17, 12, 4, 3);
  sha_round(20, 18, 13, 5, 4);
  sha_round(21, 19, 14, 6, 5);
  sha_round(22, 20, 15, 7, 6);
  sha_round(23, 21, 16, 8, 7);
  sha_round(24, 22, 17, 9, 8);
  sha_round(25, 23, 18, 10, 9);
  sha_round(26, 24, 19, 11, 10);
  sha_round(27, 25, 20, 12, 11);
  sha_round(28, 26, 21, 13, 12);
  sha_round(29, 27, 22, 14, 13);
  sha_round(30, 28, 23, 15, 14);
  sha_round(31, 29, 24, 16, 15);
  sha_round(32, 30, 25, 17, 16);
  sha_round(33, 31, 26, 18, 17);
  sha_round(34, 32, 27, 19, 18);
  sha_round(35, 33, 28, 20, 19);
  sha_round(36, 34, 29, 21, 20);
  sha_round(37, 35, 30, 22, 21);
  sha_round(38, 36, 31, 23, 22);
  sha_round(39, 37, 32, 24, 23);
  sha_round(40, 38, 33, 25, 24);
  sha_round(41, 39, 34, 26, 25);
  sha_round(42, 40, 35, 27, 26);
  sha_round(43, 41, 36, 28, 27);
  sha_round(44, 42, 37, 29, 28);
  sha_round(45, 43, 38, 30, 29);
  sha_round(46, 44, 39, 31, 30);
  sha_round(47, 45, 40, 32, 31);
  sha_round(48, 46, 41, 33, 32);
  sha_round(49, 47, 42, 34, 33);
  sha_round(50, 48, 43, 35, 34);
  sha_round(51, 49, 44, 36, 35);
  sha_round(52, 50, 45, 37, 36);
  sha_round(53, 51, 46, 38, 37);
  sha_round(54, 52, 47, 39, 38);
  sha_round(55, 53, 48, 40, 39);
  sha_round(56, 54, 49, 41, 40);
  sha_round(57, 55, 50, 42, 41);
  sha_round(58, 56, 51, 43, 42);
  sha_round(59, 57, 52, 44, 43);
  sha_round(60, 58, 53, 45, 44);

  if (E != 0xa41f32e7)
    return (uint8)(UINT_MAX);

  sha_round(61, 59, 54, 46, 45);
  sha_round(62, 60, 55, 47, 46);
  sha_round(63, 61, 56, 48, 47);

    /*
#pragma unroll
  for (t = 16; t < 61; ++t) {
    W[t] = gamma1(W[t - 2]) + W[t - 7] + gamma0(W[t - 15]) + W[t - 16];
    T1 = H + sigma1(E) + ch(E, F, G) + K[t] + W[t];
    T2 = sigma0(A) + maj(A, B, C);
    H = G; G = F; F = E; E = D + T1; D = C; C = B; B = A; A = T1 + T2;
  }

  if (E != 0xa41f32e7)
    return (uint8)(UINT_MAX);

  for (; t < 64; ++t) {
    W[t] = gamma1(W[t - 2]) + W[t - 7] + gamma0(W[t - 15]) + W[t - 16];
    T1 = H + sigma1(E) + ch(E, F, G) + K[t] + W[t];
    T2 = sigma0(A) + maj(A, B, C);
    H = G; G = F; F = E; E = D + T1; D = C; C = B; B = A; A = T1 + T2;
  }
    */
  return (uint8)(H0, H1, H2, H3, H4, H5, H6, H7) + (uint8)(A, B, C, D, E, F, G, H);
}

uint8 sha256_finish(char* message, uint ulen, uint orig_len, uint8 digest) {
  uint K[64] = { K_CONSTS };

  unsigned t;
  uint msg_pad;
  unsigned stop;
  uint i, item, total;
  uint W[64], A, B, C, D, E, F, G, H, T1, T2;
  int  current_pad;

  msg_pad = 0;

  total  = ulen / 64 + 1;
  total += (ulen % 64 >= 56) ? 1 : 0;

  for (item = 0; item < total; ++item) {
    A = digest.s0;
    B = digest.s1;
    C = digest.s2;
    D = digest.s3;
    E = digest.s4;
    F = digest.s5;
    G = digest.s6;
    H = digest.s7;

#pragma unroll
    for (t = 0; t < countof(W); ++t) {
      W[t] = 0x00000000;
    }

    msg_pad = item * 64;
    if (ulen > msg_pad) {
      current_pad = min(64u, ulen - msg_pad);
    } else {
      current_pad = -1;
    }

    //  printf("current_pad: %d\n",current_pad);
    if (current_pad > 0) {
      i = current_pad;

      stop = i / 4;
      for (t = 0 ; t < stop ; t++){
        W[t]  = ((uchar) message[msg_pad + t * 4 + 0]) << 24;
        W[t] |= ((uchar) message[msg_pad + t * 4 + 1]) << 16;
        W[t] |= ((uchar) message[msg_pad + t * 4 + 2]) << 8;
        W[t] |= (uchar)  message[msg_pad + t * 4 + 3];
      }

      switch (i % 4) {
      case 3:
        W[t]  = ((uchar) message[msg_pad + t * 4 + 0]) << 24;
        W[t] |= ((uchar) message[msg_pad + t * 4 + 1]) << 16;
        W[t] |= ((uchar) message[msg_pad + t * 4 + 2]) << 8;
        W[t] |= ((uchar) 0x80);
        break;
      case 2:
        W[t]  = ((uchar) message[msg_pad + t * 4 + 0]) << 24;
        W[t] |= ((uchar) message[msg_pad + t * 4 + 1]) << 16;
        W[t] |= 0x8000;
        break;
      case 1:
        W[t]  = ((uchar) message[msg_pad + t * 4]) << 24;
        W[t] |= 0x800000;
        break;
      case 0:
        W[t]  = 0x80000000;
        break;
      }

      if (current_pad < 56) {
        W[15] = orig_len * 8;
      }
    } else if (current_pad < 0) {
      if (orig_len % 64 == 0)
        W[0] = 0x80000000;
      W[15] = orig_len * 8;
    }

#pragma unroll
    for (t = 0; t < 64; ++t) {
      if (t >= 16)
        W[t] = gamma1(W[t - 2]) + W[t - 7] + gamma0(W[t - 15]) + W[t - 16];
      T1 = H + sigma1(E) + ch(E, F, G) + K[t] + W[t];
      T2 = sigma0(A) + maj(A, B, C);
      H = G;
      G = F;
      F = E;
      E = D + T1;
      D = C;
      C = B;
      B = A;
      A = T1 + T2;
    }

    digest += (uint8)(A, B, C, D, E, F, G, H);
  }

  return digest;
}

bool compare_hash(uint8 min_hash, uint8 hash) {
  if (hash.s7 < min_hash.s7) return true;
  if (hash.s7 > min_hash.s7) return false;

  if (hash.s6 < min_hash.s6) return true;
  if (hash.s6 > min_hash.s6) return false;

  if (hash.s5 < min_hash.s5) return true;
  if (hash.s5 > min_hash.s5) return false;

  if (hash.s4 < min_hash.s4) return true;
  if (hash.s4 > min_hash.s4) return false;

  if (hash.s3 < min_hash.s3) return true;
  if (hash.s3 > min_hash.s3) return false;

  if (hash.s2 < min_hash.s2) return true;
  if (hash.s2 > min_hash.s2) return false;

  if (hash.s1 < min_hash.s1) return true;
  if (hash.s1 > min_hash.s1) return false;

  if (hash.s0 < min_hash.s0) return true;
  if (hash.s0 > min_hash.s0) return false;

  /*
  if (hash.s0 < min_hash.s0) return true;
  if (hash.s0 > min_hash.s0) return false;

  if (hash.s1 < min_hash.s1) return true;
  if (hash.s1 > min_hash.s1) return false;

  if (hash.s2 < min_hash.s2) return true;
  if (hash.s2 > min_hash.s2) return false;

  if (hash.s3 < min_hash.s3) return true;
  if (hash.s3 > min_hash.s3) return false;

  if (hash.s4 < min_hash.s4) return true;
  if (hash.s4 > min_hash.s4) return false;

  if (hash.s5 < min_hash.s5) return true;
  if (hash.s5 > min_hash.s5) return false;

  if (hash.s6 < min_hash.s6) return true;
  if (hash.s6 > min_hash.s6) return false;

  if (hash.s7 < min_hash.s7) return true;
  // if (hash.s7 > min_hash.s7) return false;
  */
  return false;
}

void flatten_hash(char* msg, uint bytes) {
  msg[0] = bytes >> 24;
  msg[1] = bytes >> 16;
  msg[2] = bytes >>  8;
  msg[3] = bytes >>  0;
}

__kernel void mine(__global uint* target,
                   __global char* message_ptr,
                   //__global uint* W_ptr,
                   __global uint* digest_hash_ptr,
                   __global uint* nonce_begins,
                   __global uint* nonce_ends,
                   __global uint* digests,
                   __global uint* min_nonces) {
  __private uint id = get_global_id(0);
  __private uint nonce_begin = nonce_begins[id];
  __private uint nonce_end = nonce_ends[id];
  __private char message_prenonce[64];
  __private uint i;

  prefetch(message_ptr, 80);
  //prefetch(W_ptr, 64);
  prefetch(digest_hash_ptr, 8);

#pragma unroll
  for (i = 0; i < countof(message_prenonce); ++i) {
    message_prenonce[i] = message_ptr[i];
  }

  __private uint merkle_root, timestamp, target_bits;
  i = 64;
  merkle_root  = (uchar)(message_ptr[i++]) << 24;
  merkle_root |= (uchar)(message_ptr[i++]) << 16;
  merkle_root |= (uchar)(message_ptr[i++]) <<  8;
  merkle_root |= (uchar)(message_ptr[i++]) <<  0;
  timestamp    = (uchar)(message_ptr[i++]) << 24;
  timestamp   |= (uchar)(message_ptr[i++]) << 16;
  timestamp   |= (uchar)(message_ptr[i++]) <<  8;
  timestamp   |= (uchar)(message_ptr[i++]) <<  0;
  target_bits  = (uchar)(message_ptr[i++]) << 24;
  target_bits |= (uchar)(message_ptr[i++]) << 16;
  target_bits |= (uchar)(message_ptr[i++]) <<  8;
  target_bits |= (uchar)(message_ptr[i++]) <<  0;

  __private uint8 min_hash = (uint8)(UINT_MAX);
  __private uint  min_nonce;

  __private uint8 hash_prenonce;
  __private uint8 hash_nonce;
  __private uint8 hash2_nonce;

  /* hash_prenonce = sha256_update(message_prenonce, 64, sha256_init()); */
  hash_prenonce.s0 = digest_hash_ptr[0];
  hash_prenonce.s1 = digest_hash_ptr[1];
  hash_prenonce.s2 = digest_hash_ptr[2];
  hash_prenonce.s3 = digest_hash_ptr[3];
  hash_prenonce.s4 = digest_hash_ptr[4];
  hash_prenonce.s5 = digest_hash_ptr[5];
  hash_prenonce.s6 = digest_hash_ptr[6];
  hash_prenonce.s7 = digest_hash_ptr[7];

  __attribute__ ((aligned(8))) 
  __private uint A = hash_prenonce.s0,
                 B = hash_prenonce.s1,
                 C = hash_prenonce.s2,
                 D = hash_prenonce.s3,
                 E = hash_prenonce.s4,
                 F = hash_prenonce.s5,
                 G = hash_prenonce.s6,
                 H = hash_prenonce.s7;
  __attribute__ ((aligned(8))) __private uint T1, T2;
  __attribute__ ((aligned(8))) __private uint K[64] = { K_CONSTS };
  __attribute__ ((aligned(8))) __private uint W[64];

  W[0] = merkle_root;
  W[1] = timestamp;
  W[2] = target_bits;
  W[4] = 0x80000000;
  W[5] = 0x00000000;
  W[6] = 0x00000000;
  W[7] = 0x00000000;
  W[8] = 0x00000000;
  W[9] = 0x00000000;
  W[10] = 0x00000000;
  W[11] = 0x00000000;
  W[12] = 0x00000000;
  W[13] = 0x00000000;
  W[14] = 0x00000000;
  W[15] = 80 * 8;

#pragma unroll
  for (__private uint t = 0; t < 3; ++t) {
    T1 = H + sigma1(E) + ch(E, F, G) + K[t] + W[t];
    T2 = sigma0(A) + maj(A, B, C);
    H = G;
    G = F;
    F = E;
    E = D + T1;
    D = C;
    C = B;
    B = A;
    A = T1 + T2;
  }

#pragma unroll 0
  for (uint nonce = nonce_begin; ; ++nonce) {
    /* __private uint W[64]; */
    W[0] = merkle_root;
    W[1] = timestamp;
    W[2] = target_bits;
    W[3] = nonce;
    W[4] = 0x80000000;
    W[5] = 0x00000000;
    W[6] = 0x00000000;
    W[7] = 0x00000000;
    W[8] = 0x00000000;
    W[9] = 0x00000000;
    W[10] = 0x00000000;
    W[11] = 0x00000000;
    W[12] = 0x00000000;
    W[13] = 0x00000000;
    W[14] = 0x00000000;
    W[15] = 80 * 8;

    //W[3] = nonce;
    /* __private uint A_ = A,
     *                B_ = B,
     *                C_ = C,
     *                D_ = D,
     *                E_ = E,
     *                F_ = F,
     *                G_ = G,
     *                H_ = H;
     * __private uint T1_ = T1, T2_ = T2;
     * 
     * for (uint t = 3; t < 64; ++t) {
     *   if (t >= 16)
     *     W[t] = gamma1(W[t - 2]) + W[t - 7] + gamma0(W[t - 15]) + W[t - 16];
     *   T1_ = H_ + sigma1(E_) + ch(E_, F_, G_) + K[t] + W[t];
     *   T2_ = sigma0(A_) + maj(A_, B_, C_);
     *   H_ = G_;
     *   G_ = F_;
     *   F_ = E_;
     *   E_ = D_ + T1_;
     *   D_ = C_;
     *   C_ = B_;
     *   B_ = A_;
     *   A_ = T1_ + T2_;
     * }
     * 
     * hash_nonce = hash_prenonce + (uint8)(A_, B_, C_, D_, E_, F_, G_, H_); */

    hash_nonce = sha256_nonce_block(W,
                                    (uint8)(A, B, C, D, E, F, G, H),
                                    (uint2)(T1, T2));
    hash_nonce += hash_prenonce;

    hash2_nonce = sha256_second_hash_ii(hash_nonce);
    if (hash2_nonce.s7 == 0) {
      hash2_nonce.s0 = htonl(hash2_nonce.s0);
      hash2_nonce.s1 = htonl(hash2_nonce.s1);
      hash2_nonce.s2 = htonl(hash2_nonce.s2);
      hash2_nonce.s3 = htonl(hash2_nonce.s3);
      hash2_nonce.s4 = htonl(hash2_nonce.s4);
      hash2_nonce.s5 = htonl(hash2_nonce.s5);
      hash2_nonce.s6 = htonl(hash2_nonce.s6);
      hash2_nonce.s7 = htonl(hash2_nonce.s7);

      if (compare_hash(min_hash, hash2_nonce)) {
        min_hash  = hash2_nonce;
        min_nonce = ntohl(nonce);
      }
    }

    if (nonce == nonce_end)
      break;
  }

  __global uint* digest = digests + (id * 8);
  digest[0] = min_hash.s7;
  digest[1] = min_hash.s6;
  digest[2] = min_hash.s5;
  digest[3] = min_hash.s4;
  digest[4] = min_hash.s3;
  digest[5] = min_hash.s2;
  digest[6] = min_hash.s1;
  digest[7] = min_hash.s0;

  min_nonces[id] = min_nonce;

  /* barrier(CLK_LOCAL_MEM_FENCE);
   * barrier(CLK_GLOBAL_MEM_FENCE); */
}
